@page "/category"

@using Categorise.Data
@using Categorise.Services
@using System.Security.Claims;
@inject ICategoryService CategoryService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime js

<AuthorizeView>
    <Authorized>
        <h1>Categories</h1>

        <div class="form-group">
            <a class="btn btn-success" href="category/create"><i class="oi oi-plus"></i> Create New</a>
        </div>

        @if (categories == null)
            {
                <p><em>Loading...</em></p>
            }
            else
            {
                <table class="table">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var category in categories)
                        {
                            <tr>
                                <td>@category.CategoryName</td>
                                <td>
                                    <a class="btn btn-success" href="category/edit/@category.Id">Edit</a>
                                    <button class="btn btn-danger" @onclick="@(() => Delete(category.Id))">Delete</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </Authorized>
        <NotAuthorized>
            <a href="Identity/Account/Register">Register</a>
            <a href="Identity/Account/Login">Log in</a>
        </NotAuthorized>
    </AuthorizeView>

    @code {
    private IEnumerable<Category> categories;
    private string _userId;

    protected override async Task OnInitializedAsync()
    {
        await GetClaimsPrincipalData();
        categories = CategoryService.GetCategories(_userId);
    }

    private async Task GetClaimsPrincipalData()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            _userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value; ;
        }
    }

    async Task Delete(Guid categoryId)
    {
        Category category = CategoryService.GetCategory(categoryId, _userId);

        if (category != null)
        {
            if (await js.InvokeAsync<bool>("confirm", $"Are you sure you want to delete category: {category.CategoryName}?"))
            {
                CategoryService.DeleteCategory(categoryId, _userId);
            }
        }
    }
}
